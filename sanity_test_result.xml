<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="dikshant-pc" name="pytest" skipped="0" tests="8" time="54.352" timestamp="2021-06-17T01:55:49.952653"><testcase classname="smarts.core.tests.test_python_version" name="test_python_version" time="0.009" /><testcase classname="smarts.core.tests.test_dynamics_backend" name="test_set_pose" time="0.717" /><testcase classname="smarts.core.tests.test_sumo_version" name="test_sumo_version" time="1.091"><failure message="def test_sumo_version():&#10;        from smarts.core.utils import networking&#10;        from smarts.core.utils.sumo import SUMO_PATH, traci&#10;    &#10;        load_params = [&#10;            &quot;--start&quot;,&#10;            &quot;--quit-on-end&quot;,&#10;            &quot;--net-file=scenarios/loop/map.net.xml&quot;,&#10;            &quot;--no-step-log&quot;,&#10;            &quot;--no-warnings=1&quot;,&#10;        ]&#10;    &#10;        sumo_port = networking.find_free_port()&#10;        sumo_cmd = [&#10;            os.path.join(SUMO_PATH, &quot;bin&quot;, &quot;sumo&quot;),&#10;            &quot;--remote-port=%s&quot; % sumo_port,&#10;            *load_params,&#10;        ]&#10;    &#10;        sumo_proc = subprocess.Popen(&#10;            sumo_cmd,&#10;            stdin=subprocess.PIPE,&#10;            stdout=subprocess.PIPE,&#10;            stderr=subprocess.PIPE,&#10;        )&#10;    &#10;        traci_conn = traci.connect(&#10;&gt;           sumo_port, numRetries=10, proc=sumo_proc, waitBetweenRetries=0.1&#10;        )&#10;&#10;smarts/core/tests/test_sumo_version.py:58: &#10;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ &#10;&#10;port = 35347, numRetries = 10, host = 'localhost'&#10;proc = &lt;subprocess.Popen object at 0x7f7ccff73cd0&gt;, waitBetweenRetries = 0.1&#10;&#10;    def connect(port=8813, numRetries=tc.DEFAULT_NUM_RETRIES, host=&quot;localhost&quot;, proc=None, waitBetweenRetries=1):&#10;        &quot;&quot;&quot;&#10;        Establish a connection to a TraCI-Server and return the&#10;        connection object. The connection is not saved in the pool and not&#10;        accessible via traci.switch. It should be safe to use different&#10;        connections established by this method in different threads.&#10;        &quot;&quot;&quot;&#10;        for retry in range(1, numRetries + 2):&#10;            try:&#10;                conn = Connection(host, port, proc)&#10;                if _connectHook is not None:&#10;                    _connectHook(conn)&#10;                return conn&#10;            except socket.error as e:&#10;                if proc is not None and proc.poll() is not None:&#10;                    raise TraCIException(&quot;TraCI server already finished&quot;)&#10;                if retry &gt; 1:&#10;                    print(&quot;Could not connect to TraCI server at %s:%s&quot; % (host, port), e)&#10;                if retry &lt; numRetries + 1:&#10;                    print(&quot; Retrying in %s seconds&quot; % waitBetweenRetries)&#10;                    time.sleep(waitBetweenRetries)&#10;&gt;       raise FatalTraCIError(&quot;Could not connect in %s tries&quot; % (numRetries + 1))&#10;E       traci.exceptions.FatalTraCIError: Could not connect in 11 tries&#10;&#10;/usr/share/sumo/tools/traci/main.py:128: FatalTraCIError">def test_sumo_version():
        from smarts.core.utils import networking
        from smarts.core.utils.sumo import SUMO_PATH, traci
    
        load_params = [
            "--start",
            "--quit-on-end",
            "--net-file=scenarios/loop/map.net.xml",
            "--no-step-log",
            "--no-warnings=1",
        ]
    
        sumo_port = networking.find_free_port()
        sumo_cmd = [
            os.path.join(SUMO_PATH, "bin", "sumo"),
            "--remote-port=%s" % sumo_port,
            *load_params,
        ]
    
        sumo_proc = subprocess.Popen(
            sumo_cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
    
        traci_conn = traci.connect(
&gt;           sumo_port, numRetries=10, proc=sumo_proc, waitBetweenRetries=0.1
        )

smarts/core/tests/test_sumo_version.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

port = 35347, numRetries = 10, host = 'localhost'
proc = &lt;subprocess.Popen object at 0x7f7ccff73cd0&gt;, waitBetweenRetries = 0.1

    def connect(port=8813, numRetries=tc.DEFAULT_NUM_RETRIES, host="localhost", proc=None, waitBetweenRetries=1):
        """
        Establish a connection to a TraCI-Server and return the
        connection object. The connection is not saved in the pool and not
        accessible via traci.switch. It should be safe to use different
        connections established by this method in different threads.
        """
        for retry in range(1, numRetries + 2):
            try:
                conn = Connection(host, port, proc)
                if _connectHook is not None:
                    _connectHook(conn)
                return conn
            except socket.error as e:
                if proc is not None and proc.poll() is not None:
                    raise TraCIException("TraCI server already finished")
                if retry &gt; 1:
                    print("Could not connect to TraCI server at %s:%s" % (host, port), e)
                if retry &lt; numRetries + 1:
                    print(" Retrying in %s seconds" % waitBetweenRetries)
                    time.sleep(waitBetweenRetries)
&gt;       raise FatalTraCIError("Could not connect in %s tries" % (numRetries + 1))
E       traci.exceptions.FatalTraCIError: Could not connect in 11 tries

/usr/share/sumo/tools/traci/main.py:128: FatalTraCIError</failure></testcase><testcase classname="smarts.core.tests.test_sensors" name="test_waypoints_sensor" time="0.311" /><testcase classname="smarts.core.tests.test_smarts" name="test_smarts_doesnt_leak_tasks_after_reset" time="6.092" /><testcase classname="smarts.env.tests.test_social_agent" name="test_social_agents" time="14.171" /><testcase classname="tests.test_examples" name="test_examples[multi_agent]" time="18.598" /><testcase classname="tests.test_examples" name="test_multi_instance_example" time="10.931" /></testsuite></testsuites>